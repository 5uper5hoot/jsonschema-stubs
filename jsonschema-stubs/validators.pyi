# Stubs for jsonschema.validators (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class _DontDoThat(Exception): ...

validators: Any
meta_schemas: Any

def validates(version: Any): ...

class _DefaultTypesDeprecatingMetaClass(type):
    DEFAULT_TYPES: Any = ...

def create(meta_schema: Any, validators: Any = ..., version: Optional[Any] = ..., default_types: Optional[Any] = ..., type_checker: Optional[Any] = ..., id_of: Any = ...): ...
def extend(validator: Any, validators: Any = ..., version: Optional[Any] = ..., type_checker: Optional[Any] = ...): ...

Draft3Validator: Any
Draft4Validator: Any
Draft6Validator: Any
Draft7Validator: Any

class RefResolver:
    referrer: Any = ...
    cache_remote: Any = ...
    handlers: Any = ...
    store: Any = ...
    def __init__(self, base_uri: Any, referrer: Any, store: Any = ..., cache_remote: bool = ..., handlers: Any = ..., urljoin_cache: Optional[Any] = ..., remote_cache: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_schema(cls, schema: Any, id_of: Any = ..., *args: Any, **kwargs: Any): ...
    def push_scope(self, scope: Any) -> None: ...
    def pop_scope(self) -> None: ...
    @property
    def resolution_scope(self): ...
    @property
    def base_uri(self): ...
    def in_scope(self, scope: Any) -> None: ...
    def resolving(self, ref: Any) -> None: ...
    def resolve(self, ref: Any): ...
    def resolve_from_url(self, url: Any): ...
    def resolve_fragment(self, document: Any, fragment: Any): ...
    def resolve_remote(self, uri: Any): ...

def validate(instance: Any, schema: Any, cls: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
def validator_for(schema: Any, default: Any = ...): ...
