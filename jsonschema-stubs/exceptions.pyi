# Stubs for jsonschema.exceptions (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

WEAK_MATCHES: Any
STRONG_MATCHES: Any

class _Error(Exception):
    message: Any = ...
    path: Any = ...
    schema_path: Any = ...
    context: Any = ...
    cause: Any = ...
    validator: Any = ...
    validator_value: Any = ...
    instance: Any = ...
    schema: Any = ...
    parent: Any = ...
    def __init__(self, message: Any, validator: Any = ..., path: Any = ..., cause: Optional[Any] = ..., context: Any = ..., validator_value: Any = ..., instance: Any = ..., schema: Any = ..., schema_path: Any = ..., parent: Optional[Any] = ...) -> None: ...
    def __unicode__(self): ...
    @classmethod
    def create_from(cls, other: Any): ...
    @property
    def absolute_path(self): ...
    @property
    def absolute_schema_path(self): ...

class ValidationError(_Error): ...
class SchemaError(_Error): ...

class RefResolutionError(Exception):
    def __init__(self, cause: Any) -> None: ...
    def __ne__(self, other: Any) -> None: ...
    def __eq__(self, other: Any) -> None: ...
    def __lt__(self, other: Any) -> None: ...
    def __le__(self, other: Any) -> None: ...
    def __gt__(self, other: Any) -> None: ...
    def __ge__(self, other: Any) -> None: ...

class UndefinedTypeCheck(Exception):
    type: Any = ...
    def __init__(self, type: Any) -> None: ...
    def __unicode__(self): ...

class UnknownType(Exception):
    type: Any = ...
    instance: Any = ...
    schema: Any = ...
    def __init__(self, type: Any, instance: Any, schema: Any) -> None: ...
    def __unicode__(self): ...

class FormatError(Exception):
    message: Any = ...
    cause: Any = ...
    def __init__(self, message: Any, cause: Optional[Any] = ...) -> None: ...
    def __unicode__(self): ...

class ErrorTree:
    errors: Any = ...
    def __init__(self, errors: Any = ...) -> None: ...
    def __contains__(self, index: Any): ...
    def __getitem__(self, index: Any): ...
    def __setitem__(self, index: Any, value: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    @property
    def total_errors(self): ...

def by_relevance(weak: Any = ..., strong: Any = ...): ...

relevance: Any

def best_match(errors: Any, key: Any = ...): ...
